# HG changeset patch
# User Matti Picus <matti.picus@gmail.com>
# Date 1691742889 -10800
#      Fri Aug 11 11:34:49 2023 +0300
# Branch conda-3.9-v7.3.12
# Node ID fa9fb672e6d8938f9f9e62137c1e3473711a5d40
# Parent  f160114383d06721f8231e5e9b0ec5a147867816
hide functools.partial from the stack (issue 3988)

diff -r f160114383d0 -r fa9fb672e6d8 extra_tests/test_functools.py
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/extra_tests/test_functools.py	Fri Aug 11 11:34:49 2023 +0300
@@ -0,0 +1,19 @@
+import functools
+import sys
+import os
+
+def test_partial_stack():
+    # issue 3988
+    stack = []
+    def multiply(a, b):
+        frame = sys._getframe()
+        while frame:
+            stack.append(frame.f_code.co_name)
+            frame = frame.f_back
+        return a * b
+
+    penta = functools.partial(multiply, 5)
+    assert penta(2) == 10
+    assert len(stack) > 1
+    # Make sure partial.__call__ is not in the first few stack functions
+    assert all([f != "__call__" for f in stack[:3]])
diff -r f160114383d0 -r fa9fb672e6d8 lib-python/3/functools.py
--- a/lib-python/3/functools.py	Sat Aug 12 23:53:03 2023 +0300
+++ b/lib-python/3/functools.py	Fri Aug 11 11:34:49 2023 +0300
@@ -20,6 +20,8 @@
 from reprlib import recursive_repr
 from _thread import RLock
 from types import GenericAlias
+try: from __pypy__ import hidden_applevel
+except ImportError: builtinify = lambda f: f
 
 
 ################################################################################
@@ -203,6 +205,7 @@
 ### cmp_to_key() function converter
 ################################################################################
 
+@hidden_applevel
 def cmp_to_key(mycmp):
     """Convert a cmp= function into a key= function"""
     class K(object):
@@ -234,6 +237,7 @@
 
 _initial_missing = object()
 
+@hidden_applevel
 def reduce(function, sequence, initial=_initial_missing):
     """
     reduce(function, sequence[, initial]) -> value
@@ -297,6 +301,7 @@
         self.keywords = keywords
         return self
 
+    @hidden_applevel
     def __call__(self, /, *args, **keywords):
         keywords = {**self.keywords, **keywords}
         return self.func(*self.args, *args, **keywords)
@@ -640,7 +645,7 @@
 
     wrapper.cache_info = cache_info
     wrapper.cache_clear = cache_clear
-    return wrapper
+    return hidden_applevel(wrapper)
 
 try:
     from _functools import _lru_cache_wrapper

